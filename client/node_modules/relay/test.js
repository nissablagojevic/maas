function memoize(fn) {
  var memoized = [];
  return function(n) {
    return n in memoized ? memoized[n] : (memoized[n] = fn(n));
  }
}

var fib = memoize(function(n) {
  n |= 0;
  return n < 2 ? 1 : fib(n-2) + fib(n-1);
});

var relay = require('./relay');
var chain = relay.chain, combine = relay.combine, parallel = relay.parallel;

var avgPowers2_3 = chain(
  function power2and3(base, callback) {
    callback(null, base * base, base * base * base);
  },
  function add(a, b, callback) {
    callback(null, a + b);
  },
  function half(a, callback) {
    callback(null, a / 2);
  });

var log = function(error, result) { console.log(result); }

avgPowers2_3(2, log); // logs ‘6’
avgPowers2_3(3, log); // logs ‘18’
avgPowers2_3(4, log); // logs ‘40’

var compute = combine(
  // list tasks that take arguments first ...
  avgPowers2_3,
  function range(from, to, callback) {
    if (to < from) { return callback(RangeError('Invalid range')); }
    for (var result = [null]; from < to; from++) { result.push(from); }
    callback.apply(null, result);
  },
  // ... and tasks without arguments last
  function random(callback) {
    callback(null, Math.random());
  });

compute([5], // arguments for avgPowers2_3
  [4, 8], // arguments for range
  function callback(error, avg, range, random) {
    console.log(avg, range, random);
  });
// logs “75 [ 5, 13, 34 ] 0.8519573863595724”
//                        ^^^^^^^^^^^^^^^^^^ value from last task
//          ^^^^^^^^^^^^^ values from second task as array
//       ^^ value from first task


compute([5], [4, 3], function(error, avg, range, random) {
  console.error(error, avg, range, random);
});

compute = parallel(
  // list tasks that take arguments first ...
  avgPowers2_3,
  function range(from, to, callback) {
    if (to < from) { return callback(RangeError('Invalid range')); }
    for (var result = [null]; from < to; from++) { result.push(from); }
    callback.apply(null, result);
  },
  // ... and tasks without arguments last
  function random(callback) {
    callback(null, Math.random());
  });

compute([5], [4, 3], function(error, avg, range, random) {
  console.error(error, avg, range, random);
});
